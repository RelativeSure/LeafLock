{{- if .Values.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "leaflock.fullname" . }}-backup
  labels:
    {{- include "leaflock.labels" . | nindent 4 }}
    app.kubernetes.io/component: backup
spec:
  schedule: {{ .Values.backup.schedule | quote }}
  timeZone: {{ .Values.backup.timezone | default "UTC" }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "leaflock.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: "{{ .Values.backup.image.registry }}{{ .Values.backup.image.repository }}:{{ .Values.backup.image.tag }}"
            imagePullPolicy: {{ .Values.backup.image.pullPolicy }}
            env:
            # Database connection
            - name: POSTGRES_HOST
              value: {{ include "leaflock.fullname" . }}-postgresql
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.auth.database | default "notes" }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username | default "postgres" }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret | default (printf "%s-postgresql" (include "leaflock.fullname" .)) }}
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey | default "postgres-password" }}

            # S3 configuration
            {{- if .Values.backup.s3.enabled }}
            - name: BACKUP_S3_ENDPOINT
              value: {{ .Values.backup.s3.endpoint }}
            - name: BACKUP_S3_REGION
              value: {{ .Values.backup.s3.region }}
            - name: BACKUP_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.existingSecret }}
                  key: s3-bucket
            - name: BACKUP_S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.existingSecret }}
                  key: s3-access-key
            - name: BACKUP_S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.existingSecret }}
                  key: s3-secret-key
            {{- end }}

            # Backup settings
            - name: BACKUP_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.existingSecret }}
                  key: encryption-key
            - name: BACKUP_RETENTION_DAYS
              value: {{ .Values.backup.retentionDays | quote }}
            - name: ENABLE_BACKUPS
              value: "true"
            - name: TZ
              value: {{ .Values.backup.timezone | default "UTC" }}

            resources:
              {{- toYaml .Values.backup.resources | nindent 14 }}

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000
              capabilities:
                drop:
                - ALL

            volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: backup-tmp
              mountPath: /tmp/backups

          volumes:
          - name: tmp
            emptyDir: {}
          - name: backup-tmp
            emptyDir: {}

          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            seccompProfile:
              type: RuntimeDefault
{{- end }}