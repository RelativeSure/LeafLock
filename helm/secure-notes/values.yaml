# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Common labels
commonLabels: {}
commonAnnotations: {}

# Image settings for backend
backend:
  enabled: true
  replicaCount: 2
  image:
    registry: ""
    repository: secure-notes/backend
    tag: "latest"
    pullPolicy: Never
    pullSecrets: []
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
    annotations: {}
    
  # Deployment configuration
  deployment:
    annotations: {}
    labels: {}
    
  # Container configuration
  containerPort: 8080
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
      
  # Security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
      
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL
        
  # Health checks
  livenessProbe:
    enabled: true
    httpGet:
      path: /api/v1/health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    
  readinessProbe:
    enabled: true
    httpGet:
      path: /api/v1/ready
      port: http
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
    
  # Startup probe
  startupProbe:
    enabled: true
    httpGet:
      path: /api/v1/health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 10
    successThreshold: 1
    
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  # Environment variables (secrets managed separately)
  env:
    PORT: "8080"
    CORS_ORIGINS: "https://localhost:3000"
    
  # Volume mounts for temporary files
  volumeMounts:
    - name: tmp
      mountPath: /tmp
      readOnly: false
      
  volumes:
    - name: tmp
      emptyDir: {}

# Image settings for frontend
frontend:
  enabled: true
  replicaCount: 2
  image:
    registry: ""
    repository: secure-notes/frontend
    tag: "latest"
    pullPolicy: Never
    pullSecrets: []
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
    annotations: {}
    
  # Deployment configuration
  deployment:
    annotations: {}
    labels: {}
    
  # Container configuration
  containerPort: 80
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
      
  # Security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault
      
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    capabilities:
      drop:
        - ALL
        
  # Health checks
  livenessProbe:
    enabled: true
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    
  readinessProbe:
    enabled: true
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
    
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  # Volume mounts for nginx cache and temp
  volumeMounts:
    - name: nginx-cache
      mountPath: /var/cache/nginx
      readOnly: false
    - name: nginx-run
      mountPath: /var/run
      readOnly: false
      
  volumes:
    - name: nginx-cache
      emptyDir: {}
    - name: nginx-run
      emptyDir: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: secure-notes.example.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: frontend
            port: 80
        - path: /api
          pathType: Prefix
          service:
            name: backend
            port: 8080
  tls:
    - secretName: secure-notes-tls
      hosts:
        - secure-notes.example.com

# Service Account and RBAC
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list", "watch"]

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: secure-notes
  egress:
    enabled: true
    to:
      - namespaceSelector:
          matchLabels:
            name: kube-system
        ports:
          - protocol: TCP
            port: 53
          - protocol: UDP
            port: 53
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: postgresql
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: redis

# Secrets configuration
secrets:
  # JWT signing secret (base64 encoded)
  jwtSecret: ""
  # Server encryption key (base64 encoded) 
  serverEncryptionKey: ""
  
# ConfigMap for application configuration
config:
  backend:
    maxLoginAttempts: "5"
    lockoutDuration: "15m"
    sessionDuration: "24h"
    corsOrigins: "https://secure-notes.example.com"

#
# PostgreSQL Subchart Configuration (Bitnami)
#
postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    postgresPassword: ""  # Set in secrets
    username: "notes"
    password: ""  # Set in secrets
    database: "notes"
    existingSecret: "secure-notes-postgresql"
    secretKeys:
      adminPasswordKey: "postgres-password"
      userPasswordKey: "password"
  
  # Architecture
  architecture: standalone
  
  # Primary configuration
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: ""
      accessModes:
        - ReadWriteOnce
    
    # Resources
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    
    # Security context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
      runAsGroup: 1001
    
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    
    # PostgreSQL configuration
    extendedConfiguration: |
      # Connection settings
      max_connections = 100
      shared_buffers = 256MB
      effective_cache_size = 1GB
      work_mem = 4MB
      maintenance_work_mem = 64MB
      
      # SSL settings
      ssl = on
      ssl_ciphers = 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256'
      ssl_prefer_server_ciphers = on
      
      # Logging
      log_statement = 'all'
      log_duration = on
      log_connections = on
      log_disconnections = on
      
      # Extensions
      shared_preload_libraries = 'pgcrypto,pg_stat_statements'
    
    # Init DB configuration
    initdb:
      scripts:
        01-extensions.sql: |
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE EXTENSION IF NOT EXISTS "pgcrypto";
          CREATE EXTENSION IF NOT EXISTS "pg_trgm";
          CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

  # Metrics
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

#
# Redis Subchart Configuration (Bitnami)  
#
redis:
  enabled: true
  auth:
    enabled: true
    password: ""  # Set in secrets
    existingSecret: "secure-notes-redis"
    existingSecretPasswordKey: "redis-password"
  
  # Architecture
  architecture: standalone
  
  # Master configuration
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
      accessModes:
        - ReadWriteOnce
    
    # Resources
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    
    # Security context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    
    # Redis configuration
    configuration: |
      # Network and connection
      bind 0.0.0.0
      port 6379
      
      # Persistence
      appendonly yes
      appendfsync everysec
      
      # Security
      rename-command FLUSHALL ""
      rename-command FLUSHDB ""
      rename-command DEBUG ""
      rename-command CONFIG ""
      
      # Memory management
      maxmemory-policy allkeys-lru
      
      # Logging
      loglevel notice
  
  # Metrics
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

# Pod Security Standards
podSecurityPolicy:
  enabled: false

podSecurityStandards:
  enforced: true
  profile: restricted

# Monitoring and observability
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: monitoring
    interval: 30s
    path: /metrics
  
  prometheusRule:
    enabled: false
    namespace: monitoring
    rules: []

# Tests
tests:
  enabled: true
  image:
    registry: ""
    repository: curlimages/curl
    tag: "8.5.0"
    pullPolicy: IfNotPresent