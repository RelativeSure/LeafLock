# docker-compose.coolify.yml - LeafLock deployment for Coolify
# Minimal configuration - let Coolify handle infrastructure

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: leaflock
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C --lc-collate=C --lc-ctype=C"
      LC_ALL: C
      LANG: C
    command: ["sh", "-c", "apk add --no-cache musl-locales && docker-entrypoint.sh postgres"]

  # Redis Cache for Sessions
  redis:
    image: redis:8-alpine
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/leaflock?sslmode=disable&connect_timeout=30
      REDIS_URL: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_ENCRYPTION_KEY: ${SERVER_ENCRYPTION_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS}
      PORT: 8080
      APP_ENV: ${APP_ENV:-production}
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-true}
      ENABLE_DEFAULT_ADMIN: ${ENABLE_DEFAULT_ADMIN:-true}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD}
      ADMIN_USER_IDS: ${ADMIN_USER_IDS:-}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    environment:
      BACKEND_INTERNAL_URL: ${BACKEND_INTERNAL_URL:-http://backend:8080}
      PORT: 80
    expose:
      - "80"
    depends_on:
      backend:
        condition: service_started

# Coolify Deployment Optimizations:
# STABILITY AND PERFORMANCE IMPROVEMENTS:
# 1. PostgreSQL Locale Fixes:
#    - Added musl-locales package installation
#    - Proper locale environment variables (LC_ALL=C, LANG=C)
#    - Fixed POSTGRES_INITDB_ARGS with complete locale specification
#
# 2. Service Coordination:
#    - Progressive startup: postgres/redis → backend → frontend
#    - Extended connection timeouts for Coolify environment
#    - Proper depends_on configuration for service ordering
#
# 3. Container Stability:
#    - PostgreSQL: Locale package installation prevents shutdowns
#    - Redis: Memory management and persistence configuration
#    - Extended database connection timeouts (30s)
#
# 4. Coolify Compatibility:
#    - No custom health checks (Coolify manages these)
#    - Service discovery via standard container names
#    - Minimal configuration letting Coolify handle infrastructure
#
# TARGET STARTUP TIME: Under 30 seconds
# 
# DEPLOYMENT NOTES:
# 1. Set all required environment variables in Coolify UI
# 2. Use strong, randomly generated passwords and keys
# 3. Configure domain and SSL in Coolify for the frontend service
# 4. Monitor logs during deployment: docker compose logs -f
# 5. Health endpoints:
#    - Backend: http://your-backend:8080/api/v1/health
#    - Frontend: http://your-frontend/
#
# Rate Limiting Configuration:
# - To DISABLE rate limiting entirely: Set RATE_LIMIT_MODE=disabled
# - For progressive delays (default): Set RATE_LIMIT_MODE=progressive
# - For shared IP environments: Set RATE_LIMIT_USE_SUBNET=true
# - To disable IP rate limiting: Set IP_RATE_LIMIT_ENABLED=false
