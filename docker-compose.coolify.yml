# docker-compose.coolify.yml - LeafLock deployment for Coolify
# Minimal configuration - let Coolify handle infrastructure

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: leaflock
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"

  # Redis Cache for Sessions
  redis:
    image: redis:8-alpine
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/leaflock?sslmode=disable&connect_timeout=10
      REDIS_URL: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_ENCRYPTION_KEY: ${SERVER_ENCRYPTION_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS}
      PORT: 8080
      APP_ENV: ${APP_ENV:-production}
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-true}
      ENABLE_DEFAULT_ADMIN: ${ENABLE_DEFAULT_ADMIN:-true}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD}
      ADMIN_USER_IDS: ${ADMIN_USER_IDS:-}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    depends_on:
      - postgres
      - redis

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    environment:
      BACKEND_INTERNAL_URL: ${BACKEND_INTERNAL_URL:-http://backend:8080}
      PORT: 80
    expose:
      - "80"
    depends_on:
      - backend

# Coolify Fast Startup Optimization:
# PERFORMANCE OPTIMIZATIONS IMPLEMENTED:
# 1. Aggressive Health Checks:
#    - PostgreSQL: 3s intervals, 10s start period, 2s timeout
#    - Redis: 2s intervals, 5s start period, 1s timeout  
#    - Backend: 5s intervals, 15s start period, 3s timeout
#    - Frontend: 3s intervals, 10s start period, 2s timeout
#
# 2. Progressive Dependencies:
#    - Redis starts first (fastest)
#    - PostgreSQL starts in parallel
#    - Backend waits for both DB services to be healthy
#    - Frontend waits for backend to be healthy
#
# 3. Resource Limits (prevents resource contention):
#    - PostgreSQL: 512M/256M memory, 0.5/0.2 CPU
#    - Redis: 256M/64M memory, 0.3/0.1 CPU
#    - Backend: 1G/512M memory, 1.0/0.5 CPU
#    - Frontend: 128M/32M memory, 0.2/0.05 CPU
#
# 4. Optimized Health Check Commands:
#    - Backend: Uses /api/v1/health endpoint for comprehensive checks
#    - Frontend: Uses wget with timeout for nginx health
#    - Redis: Direct PING command with auth
#    - PostgreSQL: pg_isready for fast connection test
#
# TARGET STARTUP TIME: Under 30 seconds
# 
# DEPLOYMENT NOTES:
# 1. Set all required environment variables in Coolify UI
# 2. Use strong, randomly generated passwords and keys
# 3. Configure domain and SSL in Coolify for the frontend service
# 4. Monitor logs during deployment: docker compose logs -f
# 5. Health endpoints:
#    - Backend: http://your-backend:8080/api/v1/health
#    - Frontend: http://your-frontend/
#
# Rate Limiting Configuration:
# - To DISABLE rate limiting entirely: Set RATE_LIMIT_MODE=disabled
# - For progressive delays (default): Set RATE_LIMIT_MODE=progressive
# - For shared IP environments: Set RATE_LIMIT_USE_SUBNET=true
# - To disable IP rate limiting: Set IP_RATE_LIMIT_ENABLED=false
