# docker-compose.coolify.yml - LeafLock deployment for Coolify
# Optimized for fast startup on Coolify with aggressive health checks,
# progressive timing, proper dependencies, and resource limits.
# Target startup time: under 30 seconds
#
# NOTE: Docker security warnings about sensitive build arguments are expected and harmless.
# Coolify passes ALL environment variables as build arguments by default, but our Dockerfiles
# only use secrets as runtime environment variables, not during the build phase.
# Warnings like "SecretsUsedInArgOrEnv: ARG DEFAULT_ADMIN_PASSWORD" can be safely ignored.

# version: '3.8' - Removed to avoid obsolete attribute warning

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: leaflock-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Please set POSTGRES_PASSWORD in Coolify environment variables}
      POSTGRES_DB: leaflock
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - leaflock-network
    # Aggressive health checks for fast startup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost -p 5432"]
      interval: 3s
      timeout: 2s
      start_period: 10s
      retries: 5
    # Resource limits to prevent contention
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    restart: unless-stopped

  # Redis Cache for Sessions  
  redis:
    image: redis:7-alpine
    container_name: leaflock-redis
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:?Please set REDIS_PASSWORD in Coolify environment variables}"]
    volumes:
      - redis_data:/data
    networks:
      - leaflock-network
    # Fast Redis health checks
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:?Please set REDIS_PASSWORD in Coolify environment variables}", "--no-auth-warning", "PING"]
      interval: 2s
      timeout: 1s
      start_period: 5s
      retries: 3
    # Resource limits for Redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 64M
          cpus: '0.1'
    restart: unless-stopped

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: leaflock-backend
    environment:
      # Database Configuration
      # IMPORTANT: sslmode=disable required for containerized PostgreSQL without TLS setup
      # DO NOT change to sslmode=prefer/require unless PostgreSQL container has proper TLS certificates
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:?}@postgres:5432/leaflock?sslmode=disable&connect_timeout=10
      
      # Redis Configuration
      REDIS_URL: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:?}
      
      # Security Keys (CRITICAL: Must be set in Coolify UI)
      JWT_SECRET: ${JWT_SECRET:?Please set JWT_SECRET (64 chars) in Coolify environment variables}
      SERVER_ENCRYPTION_KEY: ${SERVER_ENCRYPTION_KEY:?Please set SERVER_ENCRYPTION_KEY (32 chars) in Coolify environment variables}
      
      # CORS and API Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      PORT: 8080
      
      # Application Settings
      APP_ENV: ${APP_ENV:-production}
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-true}

      # Default Admin User Configuration
      ENABLE_DEFAULT_ADMIN: ${ENABLE_DEFAULT_ADMIN:-true}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL:-admin@leaflock.app}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-AdminPass123!}

      # Admin Configuration (Optional)
      ADMIN_USER_IDS: ${ADMIN_USER_IDS:-}

      # Progressive Rate Limiting Configuration
      RATE_LIMIT_MODE: ${RATE_LIMIT_MODE:-progressive}
      IP_RATE_LIMIT_ENABLED: ${IP_RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_DECAY_MINUTES: ${RATE_LIMIT_DECAY_MINUTES:-5}
      RATE_LIMIT_USE_SUBNET: ${RATE_LIMIT_USE_SUBNET:-false}
      MAX_DELAY_SECONDS: ${MAX_DELAY_SECONDS:-60}
      TRUSTED_IP_RANGES: ${TRUSTED_IP_RANGES:-}

      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    # Optimal service dependency order
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - leaflock-network
    # Health check for container orchestration - using fast liveness endpoint
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider --timeout=3 http://localhost:8080/api/v1/health/live || exit 1"]
      interval: 5s
      timeout: 3s
      start_period: 15s
      retries: 3
    # Resource limits for backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    labels:
      - "coolify.type=internal"
      - "coolify.name=leaflock-backend"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Build-time environment variables for frontend API connection
        # Use your actual domain without /api/v1 suffix (added by frontend)
        VITE_API_URL: ${VITE_API_URL:-https://leaflock.app}
        VITE_ENABLE_ADMIN_PANEL: ${VITE_ENABLE_ADMIN_PANEL:-false}
    container_name: leaflock-frontend
    environment:
      # Runtime environment variables for frontend
      BACKEND_INTERNAL_URL: ${BACKEND_INTERNAL_URL:-http://backend:8080}
      # Set port to 80 to match Coolify port mapping expectations
      PORT: 80
    expose:
      - "80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - leaflock-network
    # Optimized nginx health checks for fast frontend startup
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider --timeout=2 http://localhost:80/ || exit 1"]
      interval: 3s
      timeout: 2s
      start_period: 10s
      retries: 3
    # Resource limits for frontend nginx
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 32M
          cpus: '0.05'
    restart: unless-stopped
    labels:
      - "coolify.type=application"
      - "coolify.name=leaflock-frontend"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  leaflock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# Coolify Fast Startup Optimization:
# PERFORMANCE OPTIMIZATIONS IMPLEMENTED:
# 1. Aggressive Health Checks:
#    - PostgreSQL: 3s intervals, 10s start period, 2s timeout
#    - Redis: 2s intervals, 5s start period, 1s timeout  
#    - Backend: 5s intervals, 15s start period, 3s timeout
#    - Frontend: 3s intervals, 10s start period, 2s timeout
#
# 2. Progressive Dependencies:
#    - Redis starts first (fastest)
#    - PostgreSQL starts in parallel
#    - Backend waits for both DB services to be healthy
#    - Frontend waits for backend to be healthy
#
# 3. Resource Limits (prevents resource contention):
#    - PostgreSQL: 512M/256M memory, 0.5/0.2 CPU
#    - Redis: 256M/64M memory, 0.3/0.1 CPU
#    - Backend: 1G/512M memory, 1.0/0.5 CPU
#    - Frontend: 128M/32M memory, 0.2/0.05 CPU
#
# 4. Optimized Health Check Commands:
#    - Backend: Uses /api/v1/health endpoint for comprehensive checks
#    - Frontend: Uses wget with timeout for nginx health
#    - Redis: Direct PING command with auth
#    - PostgreSQL: pg_isready for fast connection test
#
# TARGET STARTUP TIME: Under 30 seconds
# 
# DEPLOYMENT NOTES:
# 1. Set all required environment variables in Coolify UI
# 2. Use strong, randomly generated passwords and keys
# 3. Configure domain and SSL in Coolify for the frontend service
# 4. Monitor logs during deployment: docker compose logs -f
# 5. Health endpoints:
#    - Backend: http://your-backend:8080/api/v1/health
#    - Frontend: http://your-frontend/
#
# Rate Limiting Configuration:
# - To DISABLE rate limiting entirely: Set RATE_LIMIT_MODE=disabled
# - For progressive delays (default): Set RATE_LIMIT_MODE=progressive
# - For shared IP environments: Set RATE_LIMIT_USE_SUBNET=true
# - To disable IP rate limiting: Set IP_RATE_LIMIT_ENABLED=false