# Dockerfile.backup - PostgreSQL backup service with S3 support
FROM alpine:3.22@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1

# Install required packages
RUN apk add --no-cache \
    postgresql15-client \
    aws-cli \
    openssl \
    curl \
    bash \
    dcron \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create backup user and directories
RUN addgroup -g 1000 backup && \
    adduser -D -s /bin/bash -u 1000 -G backup backup && \
    mkdir -p /tmp/backups /tmp/restore && \
    chown -R backup:backup /tmp/backups /tmp/restore

# Copy backup scripts
COPY scripts/backup.sh /usr/local/bin/backup.sh
COPY scripts/restore.sh /usr/local/bin/restore.sh

# Make scripts executable
RUN chmod +x /usr/local/bin/backup.sh /usr/local/bin/restore.sh

# Create entrypoint script
RUN cat > /usr/local/bin/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Set default timezone
TZ=${TZ:-UTC}
echo "$TZ" > /etc/timezone
ln -sf /usr/share/zoneinfo/$TZ /etc/localtime

# Check if backups are enabled
if [[ "${ENABLE_BACKUPS:-true}" == "false" ]]; then
    echo "Backups are disabled (ENABLE_BACKUPS=false)"
    echo "Container will run but no backups will be scheduled"
    # Keep container running
    exec tail -f /dev/null
fi

# Validate required environment variables
required_vars=(
    "POSTGRES_PASSWORD"
    "BACKUP_S3_BUCKET"
    "BACKUP_S3_ACCESS_KEY"
    "BACKUP_S3_SECRET_KEY"
    "BACKUP_ENCRYPTION_KEY"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [[ -z "${!var:-}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    echo "Error: Missing required environment variables:"
    printf ' - %s\n' "${missing_vars[@]}"
    echo ""
    echo "Please set these variables in your .env file or docker-compose.yml"
    exit 1
fi

# Set defaults
BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-"0 2 * * *"}  # Daily at 2 AM

echo "Backup service starting..."
echo "Schedule: $BACKUP_SCHEDULE"
echo "S3 Bucket: $BACKUP_S3_BUCKET"
echo "Retention: ${BACKUP_RETENTION_DAYS:-30} days"

# Set up cron job
echo "$BACKUP_SCHEDULE /usr/local/bin/backup.sh >> /proc/1/fd/1 2>> /proc/1/fd/2" > /tmp/crontab
crontab -u backup /tmp/crontab

# Run initial backup if requested
if [[ "${RUN_INITIAL_BACKUP:-false}" == "true" ]]; then
    echo "Running initial backup..."
    /usr/local/bin/backup.sh
fi

# Start cron daemon
echo "Starting cron daemon..."
exec crond -f -l 2 -L /proc/1/fd/1
EOF

RUN chmod +x /usr/local/bin/entrypoint.sh

# Switch to backup user
USER backup

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep crond > /dev/null || exit 1

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]