# Secure Notes Application Environment Configuration
# Copy this file to .env and update with your values

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL password (REQUIRED: Use a strong password)
POSTGRES_PASSWORD=your_secure_postgres_password_here

# Database connection URL
# Development (no SSL): postgres://postgres:password@localhost:5432/notes?sslmode=disable
# Production (with SSL): postgres://postgres:password@postgres:5432/notes?sslmode=require
DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@localhost:5432/notes?sslmode=disable

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================

# Redis password (REQUIRED: Use a strong password)
REDIS_PASSWORD=your_secure_redis_password_here

# Redis connection URL
# Development: localhost:6379 (when running locally)
# Docker: redis:6379 (when using docker-compose)
REDIS_URL=localhost:6379

# ============================================================================
# SECURITY KEYS (CRITICAL: Change these for production)
# ============================================================================

# JWT Secret Key (REQUIRED: Must be at least 64 characters for production)
# Generate with: openssl rand -base64 64
JWT_SECRET=your_64_character_jwt_secret_key_here_change_for_production

# Server Encryption Key (REQUIRED: Must be exactly 32 characters)
# Generate with: openssl rand -base64 32
SERVER_ENCRYPTION_KEY=your_32_character_encryption_key_here

# ============================================================================
# CORS AND FRONTEND CONFIGURATION
# ============================================================================

# Allowed CORS origins (comma-separated list)
# Development: Include all local development ports
# Production: Only include your production domains
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080

# Frontend API URL (used by the frontend to connect to backend)
# Development: http://localhost:8080
# Production: https://your-domain.com/api or your actual backend URL
VITE_API_URL=http://localhost:8080

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================

# Server port (default: 8080)
PORT=8080

# ============================================================================
# SSL/TLS CONFIGURATION (for production)
# ============================================================================

# SSL Domain name for certificate generation
SSL_DOMAIN=your-domain.com

# Additional domain names for SSL certificate (comma-separated)
SSL_ADDITIONAL_DOMAINS=www.your-domain.com,api.your-domain.com

# SSL Certificate details (optional, used for certificate generation)
SSL_COUNTRY=US
SSL_STATE=State
SSL_CITY=City
SSL_ORG=YourOrganization
SSL_OU=IT Department

# ============================================================================
# PRODUCTION DEPLOYMENT PATHS (for docker-compose.prod.yml)
# ============================================================================

# Host paths for production data persistence
POSTGRES_DATA_PATH=/var/lib/secure-notes/postgres
REDIS_DATA_PATH=/var/lib/secure-notes/redis

# ============================================================================
# SECURITY NOTES
# ============================================================================
#
# 1. NEVER commit the actual .env file to version control
# 2. Use strong, randomly generated passwords and keys
# 3. For production, use sslmode=require in DATABASE_URL
# 4. Store production secrets in a secure secret management system
# 5. Regularly rotate passwords and encryption keys
# 6. Use HTTPS in production (enable SSL in nginx configuration)
# 7. Restrict CORS_ORIGINS to only necessary domains in production
#
# Generate secure values:
# - PostgreSQL password: openssl rand -base64 32
# - Redis password: openssl rand -base64 32  
# - JWT secret: openssl rand -base64 64
# - Encryption key: openssl rand -base64 32
#
# ============================================================================
