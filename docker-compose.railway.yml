# docker-compose.railway.yml - LeafLock deployment for Railway
# Uses Railway's managed PostgreSQL and Redis services

services:
  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Railway provides these automatically as managed services
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      # Application secrets
      JWT_SECRET: ${JWT_SECRET}
      SERVER_ENCRYPTION_KEY: ${SERVER_ENCRYPTION_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS}
      PORT: ${PORT:-8080}
      APP_ENV: ${APP_ENV:-production}
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-true}
      ENABLE_DEFAULT_ADMIN: ${ENABLE_DEFAULT_ADMIN:-true}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD}
      ADMIN_USER_IDS: ${ADMIN_USER_IDS:-}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    ports:
      - "${PORT:-8080}:${PORT:-8080}"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    environment:
      BACKEND_INTERNAL_URL: ${BACKEND_INTERNAL_URL:-http://backend:8080}
      PORT: 80
    ports:
      - "80:80"
    depends_on:
      - backend

# Railway Deployment Optimizations:
# MANAGED SERVICES APPROACH:
# 1. Database & Cache:
#    - PostgreSQL: Railway managed PostgreSQL service
#    - Redis: Railway managed Redis service
#    - No container networking issues or DNS resolution problems
#
# 2. Application Services:
#    - Backend: Dockerized Go application
#    - Frontend: Dockerized React application with Nginx
#    - Simple service-to-service communication
#
# 3. Environment Variables:
#    - DATABASE_URL: Automatically provided by Railway PostgreSQL
#    - REDIS_URL: Automatically provided by Railway Redis
#    - Custom environment variables set in Railway dashboard
#
# 4. Railway Benefits:
#    - Zero DNS resolution issues (managed services)
#    - Automatic SSL certificates and domains
#    - Built-in CI/CD from GitHub
#    - Easy environment variable management
#    - Preview deployments for pull requests
#
# DEPLOYMENT PROCESS:
# 1. Create Railway account and connect GitHub repository
# 2. Add PostgreSQL and Redis services to Railway project
# 3. Set environment variables in Railway dashboard
# 4. Deploy from main branch - Railway auto-detects docker-compose
# 5. Configure custom domain if needed
#
# ENVIRONMENT VARIABLES TO SET IN RAILWAY:
# - JWT_SECRET: Generate with openssl rand -base64 64
# - SERVER_ENCRYPTION_KEY: Generate with openssl rand -base64 32
# - DEFAULT_ADMIN_EMAIL: Your admin email
# - DEFAULT_ADMIN_PASSWORD: Secure admin password
# - CORS_ORIGINS: Your frontend domain(s)
# - VITE_API_URL: Your backend Railway domain
#
# RAILWAY SERVICES TO ADD:
# 1. PostgreSQL (managed service)
# 2. Redis (managed service)
# 3. Backend (from this docker-compose)
# 4. Frontend (from this docker-compose)