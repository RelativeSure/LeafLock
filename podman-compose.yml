# podman-compose.yml - Rootless, secure Podman composition
version: '3.8'

services:
  # PostgreSQL with automatic SSL setup - Podman optimized
  postgres:
    image: docker.io/library/postgres:17-alpine@sha256:d5f196a551b5cef1c70853c6dd588f456d16ca4ea733e3f31c75bc1ae2f65f3f
    container_name: leaflock-postgres
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeThisSecurePassword123!}
      POSTGRES_DB: leaflock
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    command:
      - postgres
      - -c
      - ssl=on
      - -c
      - ssl_cert_file=/var/lib/postgresql/server.crt
      - -c
      - ssl_key_file=/var/lib/postgresql/server.key
      - -c
      - shared_preload_libraries=pgcrypto
      - -c
      - max_connections=100
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z  # :Z for SELinux
      - ./init-ssl.sh:/docker-entrypoint-initdb.d/00-init-ssl.sh:ro,Z
    networks:
      - leaflock
    security_opt:
      - label=disable  # For rootless podman
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for session management - Podman optimized
  redis:
    image: docker.io/library/redis:8-alpine@sha256:987c376c727652f99625c7d205a1cba3cb2c53b92b0b62aade2bd48ee1593232
    container_name: leaflock-redis
    hostname: redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ChangeThisRedisPassword123!}
    volumes:
      - redis_data:/data:Z
    networks:
      - leaflock
    security_opt:
      - label=disable
    sysctls:
      - net.core.somaxconn=1024
      - vm.overcommit_memory=1
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API - Podman optimized
  backend:
    build:
      context: ./backend
      dockerfile: Containerfile  # Podman prefers Containerfile
    image: localhost/leaflock-backend:latest
    container_name: leaflock-backend
    hostname: backend
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-ChangeThisSecurePassword123!}@postgres:5432/leaflock?sslmode=require
      REDIS_URL: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-ChangeThisRedisPassword123!}
      JWT_SECRET: ${JWT_SECRET:-ChangeThisToRandom64CharStringForProductionUsePlease!}
      SERVER_ENCRYPTION_KEY: ${SERVER_ENCRYPTION_KEY:-ChangeThisToRandom32CharString!}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost,https://localhost}
      PORT: 8080
      # Default admin user configuration
      ENABLE_DEFAULT_ADMIN: ${ENABLE_DEFAULT_ADMIN:-true}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL:-admin@leaflock.app}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-AdminPass123!}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - leaflock
    security_opt:
      - label=disable
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=10M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend - Podman optimized
  frontend:
    build:
      context: ./frontend
      dockerfile: Containerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
    image: localhost/leaflock-frontend:latest
    container_name: leaflock-frontend
    hostname: frontend
    ports:
      - "3000:8080"  # Rootless podman uses high ports
    depends_on:
      - backend
    networks:
      - leaflock
    security_opt:
      - label=disable
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid
      - /var/run:noexec,nosuid
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  leaflock:
    driver: bridge

---
# podman-pod.yml - Podman Pod definition (alternative to compose)
apiVersion: v1
kind: Pod
metadata:
  name: leaflock-pod
  labels:
    app: leaflock
spec:
  hostname: leaflock
  restartPolicy: Always
  containers:
  - name: postgres
    image: docker.io/library/postgres:17-alpine@sha256:d5f196a551b5cef1c70853c6dd588f456d16ca4ea733e3f31c75bc1ae2f65f3f
    env:
    - name: POSTGRES_PASSWORD
      value: "ChangeThisSecurePassword123!"
    - name: POSTGRES_DB
      value: "notes"
    - name: POSTGRES_USER
      value: "postgres"
    volumeMounts:
    - name: postgres-data
      mountPath: /var/lib/postgresql/data
    - name: init-scripts
      mountPath: /docker-entrypoint-initdb.d
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 999  # postgres user
      capabilities:
        drop:
        - ALL
    livenessProbe:
      exec:
        command:
        - pg_isready
        - -U
        - postgres
      initialDelaySeconds: 30
      periodSeconds: 10
    resources:
      limits:
        memory: "1Gi"
        cpu: "1000m"
      requests:
        memory: "256Mi"
        cpu: "100m"
        
  - name: redis
    image: docker.io/library/redis:8-alpine@sha256:987c376c727652f99625c7d205a1cba3cb2c53b92b0b62aade2bd48ee1593232
    command:
    - redis-server
    - --appendonly
    - "yes"
    - --requirepass
    - "ChangeThisRedisPassword123!"
    volumeMounts:
    - name: redis-data
      mountPath: /data
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 999
      capabilities:
        drop:
        - ALL
    resources:
      limits:
        memory: "256Mi"
        cpu: "500m"
      requests:
        memory: "64Mi"
        cpu: "50m"
        
  - name: backend
    image: localhost/leaflock-backend:latest
    env:
    - name: DATABASE_URL
      value: "postgres://postgres:ChangeThisSecurePassword123!@localhost:5432/notes?sslmode=require"
    - name: REDIS_URL
      value: "localhost:6379"
    - name: JWT_SECRET
      value: "ChangeThisToRandom64CharStringForProductionUsePlease!"
    - name: SERVER_ENCRYPTION_KEY
      value: "ChangeThisToRandom32CharString!"
    - name: PORT
      value: "8080"
    # Default admin user configuration
    - name: ENABLE_DEFAULT_ADMIN
      value: "true"
    - name: DEFAULT_ADMIN_EMAIL
      value: "admin@leaflock.app"
    - name: DEFAULT_ADMIN_PASSWORD
      value: "AdminPass123!"
    ports:
    - containerPort: 8080
      hostPort: 8080
      protocol: TCP
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 10001
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    livenessProbe:
      httpGet:
        path: /api/v1/health
        port: 8080
      initialDelaySeconds: 30
      periodSeconds: 10
    resources:
      limits:
        memory: "512Mi"
        cpu: "1000m"
      requests:
        memory: "128Mi"
        cpu: "100m"
        
  - name: frontend
    image: localhost/leaflock-frontend:latest
    ports:
    - containerPort: 8080
      hostPort: 3000
      protocol: TCP
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 101  # nginx user
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    resources:
      limits:
        memory: "256Mi"
        cpu: "500m"
      requests:
        memory: "64Mi"
        cpu: "50m"
        
  volumes:
  - name: postgres-data
    persistentVolumeClaim:
      claimName: postgres-pvc
  - name: redis-data
    persistentVolumeClaim:
      claimName: redis-pvc
  - name: init-scripts
    hostPath:
      path: ./init-scripts
      type: Directory
