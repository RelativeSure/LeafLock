services:
  postgres:
    image: postgres:18-alpine
    container_name: leaflock-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-leaflock}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 6

  redis:
    image: redis:7.4-alpine
    container_name: leaflock-redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: leaflock-backend
    environment:
      APP_ENV: development
      PORT: 8080
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-leaflock}?sslmode=disable
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-change-me-please-64-characters-long-1234567890abc}
      SERVER_ENCRYPTION_KEY: ${SERVER_ENCRYPTION_KEY:-dev-server-side-encryption-key!!}
      ENABLE_DEFAULT_ADMIN: ${ENABLE_DEFAULT_ADMIN:-true}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL:-admin@leaflock.local}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-ChangeMe123!}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
    container_name: leaflock-frontend
    environment:
      BACKEND_INTERNAL_URL: ${BACKEND_INTERNAL_URL:-http://backend:8080}
      PORT: ${FRONTEND_PORT:-80}
    ports:
      - "3000:${FRONTEND_PORT:-80}"
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data:
  redis_data:

# Optional: Enable IPv6 dual-stack networking
# Uncomment to enable IPv6 support in Docker containers
# networks:
#   default:
#     enable_ipv6: true
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 172.20.0.0/16
#           gateway: 172.20.0.1
#         - subnet: fd00:dead:beef::/48
#           gateway: fd00:dead:beef::1
