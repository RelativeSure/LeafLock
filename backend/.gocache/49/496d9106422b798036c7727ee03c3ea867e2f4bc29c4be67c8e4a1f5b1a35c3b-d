//line /tmp/go-build1859217214/b001/_testmain.go:1:1

// Code generated by 'go test'. DO NOT EDIT.

package main; import _ "runtime/coverage"

import (
	"os"

	"testing"
	"testing/internal/testdeps"

	"internal/coverage/cfile"



	_test "secure-notes"


)

var tests = []testing.InternalTest{

	{"TestCryptoService", _test.TestCryptoService},

	{"TestPasswordHashing", _test.TestPasswordHashing},

	{"TestConfig", _test.TestConfig},

	{"TestJWTMiddleware", _test.TestJWTMiddleware},

	{"TestAuthHandlerSuite", _test.TestAuthHandlerSuite},

	{"TestNotesHandlerSuite", _test.TestNotesHandlerSuite},

	{"TestDatabaseIntegrationSuite", _test.TestDatabaseIntegrationSuite},

	{"TestSQLInjectionPrevention", _test.TestSQLInjectionPrevention},

	{"TestRateLimitingBypass", _test.TestRateLimitingBypass},

	{"TestEncryptionKeyRotation", _test.TestEncryptionKeyRotation},

	{"TestSecuritySuite", _test.TestSecuritySuite},

	{"TestVulnerabilityAssessment", _test.TestVulnerabilityAssessment},

	{"TestPenetrationTesting", _test.TestPenetrationTesting},

	{"TestIsValidHexColor", _test.TestIsValidHexColor},

	{"TestTagsHandlerSuite", _test.TestTagsHandlerSuite},

	{"TestCleanupOldDeletedNotes", _test.TestCleanupOldDeletedNotes},

	{"TestBackgroundCleanupService", _test.TestBackgroundCleanupService},

	{"TestTrashHandlerSuite", _test.TestTrashHandlerSuite},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkPasswordHashing", _test.BenchmarkPasswordHashing},

	{"BenchmarkCryptoService", _test.BenchmarkCryptoService},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.CoverMode = "atomic"
	testdeps.Covered = ""
	testdeps.CoverSelectedPackages = []string{"secure-notes"}
	testdeps.CoverSnapshotFunc = cfile.Snapshot
	testdeps.CoverProcessTestDirFunc = cfile.ProcessCoverTestDir
	testdeps.CoverMarkProfileEmittedFunc = cfile.MarkProfileEmitted


	testdeps.ImportPath = "secure-notes"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

