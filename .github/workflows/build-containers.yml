# Build and Push Container Images
# Triggered by releases and manual dispatch
name: 🐳 Build Containers

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Container tag (defaults to latest for manual builds)'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  GO_VERSION: "1.24"
  NODE_VERSION: "20"

jobs:
  build-and-push:
    name: 🐳 Build & Push Images
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]

    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (Backend)
        if: matrix.component == 'backend'
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Extract metadata (Frontend)
        if: matrix.component == 'frontend'
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push (Backend)
        if: matrix.component == 'backend'
        id: build-backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.event.release.created_at }}

      - name: Build and push (Frontend)
        if: matrix.component == 'frontend'
        id: build-frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ matrix.component == 'backend' && steps.meta-backend.outputs.tags || steps.meta-frontend.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  generate-sbom:
    name: 📋 Generate SBOM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'

    steps:
      - name: Generate SBOM for Backend
        uses: anchore/sbom-action@v0
        with:
          image: ${{ needs.build-and-push.outputs.backend-image }}
          format: spdx-json
          output-file: backend-sbom.spdx.json

      - name: Generate SBOM for Frontend  
        uses: anchore/sbom-action@v0
        with:
          image: ${{ needs.build-and-push.outputs.frontend-image }}
          format: spdx-json
          output-file: frontend-sbom.spdx.json

      - name: Upload SBOMs to release
        if: github.event_name == 'release'
        run: |
          gh release upload ${{ github.event.release.tag_name }} \
            backend-sbom.spdx.json \
            frontend-sbom.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deployment-summary:
    name: 🚀 Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "## 🎉 Container Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Container Images:" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ needs.build-and-push.outputs.backend-image }}" ]]; then
            echo "- **Backend**: \`${{ needs.build-and-push.outputs.backend-image }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ needs.build-and-push.outputs.frontend-image }}" ]]; then
            echo "- **Frontend**: \`${{ needs.build-and-push.outputs.frontend-image }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Image Digests:" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ needs.build-and-push.outputs.backend-digest }}" ]]; then
            echo "- **Backend**: \`${{ needs.build-and-push.outputs.backend-digest }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ needs.build-and-push.outputs.frontend-digest }}" ]]; then
            echo "- **Frontend**: \`${{ needs.build-and-push.outputs.frontend-digest }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Quick Deploy:" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull latest images" >> $GITHUB_STEP_SUMMARY
          echo "docker compose pull" >> $GITHUB_STEP_SUMMARY
          echo "docker compose up -d" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "[View packages](https://github.com/${{ github.repository }}/pkgs/container)" >> $GITHUB_STEP_SUMMARY