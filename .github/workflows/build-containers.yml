# Reusable Container Build Workflow
# Builds and pushes container images for releases and CI
name: üê≥ Build Containers

on:
  workflow_call:
    inputs:
      release_version:
        description: 'Release version for tagging'
        required: false
        type: string
      push_latest:
        description: 'Whether to tag as latest'
        required: false
        type: boolean
        default: false
  
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version for tagging'
        required: false
        type: string
      push_latest:
        description: 'Whether to tag as latest'
        required: false
        type: boolean
        default: false

  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  build-images:
    name: üê≥ Build & Push Images
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    strategy:
      matrix:
        component: [backend, frontend]

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine tags
        id: tags
        run: |
          # Base image name
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}"
          
          # Default tags
          TAGS="${IMAGE_NAME}:${{ github.sha }}"
          
          # Add branch/PR tags
          if [[ "${{ github.event_name }}" == "push" ]]; then
            BRANCH_NAME="${{ github.ref_name }}"
            TAGS="${TAGS},${IMAGE_NAME}:${BRANCH_NAME}"
            
            # Add latest tag for main/master
            if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]] && [[ "${{ inputs.push_latest }}" == "true" ]]; then
              TAGS="${TAGS},${IMAGE_NAME}:latest"
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAGS="${TAGS},${IMAGE_NAME}:pr-${{ github.event.number }}"
          fi
          
          # Add release version tags
          if [[ -n "${{ inputs.release_version }}" ]]; then
            VERSION="${{ inputs.release_version }}"
            VERSION_CLEAN="${VERSION#v}"
            
            TAGS="${TAGS},${IMAGE_NAME}:${VERSION}"
            TAGS="${TAGS},${IMAGE_NAME}:${VERSION_CLEAN}"
            
            # Add semantic version tags
            if [[ ! "$VERSION" =~ -rc\. ]]; then
              # Split version for semantic tags
              IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_CLEAN"
              TAGS="${TAGS},${IMAGE_NAME}:${MAJOR}.${MINOR}"
              TAGS="${TAGS},${IMAGE_NAME}:${MAJOR}"
              TAGS="${TAGS},${IMAGE_NAME}:latest"
            fi
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Tags for ${{ matrix.component }}: ${TAGS}"

      - name: Extract metadata (Backend)
        if: matrix.component == 'backend'
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
          tags: ${{ steps.tags.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Secure Notes Backend
            org.opencontainers.image.description=Go backend for secure notes application
            org.opencontainers.image.vendor=RelativeSure
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Extract metadata (Frontend)
        if: matrix.component == 'frontend'
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
          tags: ${{ steps.tags.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Secure Notes Frontend
            org.opencontainers.image.description=React frontend for secure notes application
            org.opencontainers.image.vendor=RelativeSure
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build and push (Backend)
        if: matrix.component == 'backend'
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ inputs.release_version || github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Build and push (Frontend)
        if: matrix.component == 'frontend'
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  summary:
    name: üìã Build Summary
    runs-on: ubuntu-latest
    needs: build-images
    if: always() && needs.build-images.result == 'success'
    
    steps:
      - name: Create build summary
        run: |
          echo "## üê≥ Container Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Images Built:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ needs.build-images.outputs.backend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ needs.build-images.outputs.frontend-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîê Image Digests:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ needs.build-images.outputs.backend-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ needs.build-images.outputs.frontend-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ inputs.release_version }}" ]]; then
            echo "### üöÄ Release Deployment:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "VERSION=${{ inputs.release_version }} ./deploy-from-ghcr.sh deploy" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üîó View Packages:" >> $GITHUB_STEP_SUMMARY
            echo "[GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container)" >> $GITHUB_STEP_SUMMARY
          fi
