name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write      # create release + push CHANGELOG
  packages: write      # push container images
  actions: read
  checks: read

env:
  IMAGE_BASE: ghcr.io/RelativeSure/notes

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine previous tag
        id: prev
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 "$(git rev-list --tags --skip=1 --max-count=1)" 2>/dev/null || true)
          echo "previous_tag=$PREV_TAG" >> "$GITHUB_OUTPUT"

      - name: Collect commits since previous tag
        id: raw_commits
        run: |
          if [ -n "${{ steps.prev.outputs.previous_tag }}" ]; then
            RANGE="${{ steps.prev.outputs.previous_tag }}..HEAD"
            git log --pretty='%H||%s' "$RANGE" > commits.txt
          else
            git log --pretty='%H||%s' > commits.txt
          fi
          echo "count=$(wc -l < commits.txt)" >> "$GITHUB_OUTPUT"

      - name: Categorize commits & build release notes
        id: notes
        run: |
          set -euo pipefail
          DATE=$(date -u +%Y-%m-%d)
          TAG="${GITHUB_REF_NAME}"
          FEAT=""; FIX=""; PERF=""; DOCS=""; REFACTOR=""; TESTS=""; CHORE=""; OTHER=""
          while IFS='||' read -r HASH SUBJECT; do
            [ -z "$HASH" ] && continue
            SH=$(echo "$HASH" | cut -c1-7)
            LINE="- ${SUBJECT} (${SH})"
            shopt -s nocasematch
            case "$SUBJECT" in
              feat:* ) FEAT+="${LINE}\n" ;;
              fix:* ) FIX+="${LINE}\n" ;;
              perf:* ) PERF+="${LINE}\n" ;;
              docs:* ) DOCS+="${LINE}\n" ;;
              refactor:* ) REFACTOR+="${LINE}\n" ;;
              test:*|tests:* ) TESTS+="${LINE}\n" ;;
              chore:* ) CHORE+="${LINE}\n" ;;
              * ) OTHER+="${LINE}\n" ;;
            esac
            shopt -u nocasematch
          done < commits.txt

          section () { [ -n "$2" ] && { echo "### $1"; printf "%b" "$2"; echo; }; }

          {
            echo "## ${TAG} - ${DATE}"
            echo
            section "Features" "$FEAT"
            section "Fixes" "$FIX"
            section "Performance" "$PERF"
            section "Documentation" "$DOCS"
            section "Refactoring" "$REFACTOR"
            section "Tests" "$TESTS"
            section "Chore" "$CHORE"
            section "Other" "$OTHER"
          } > RELEASE_NOTES_BODY.md

          {
            echo 'body<<EOF'
            cat RELEASE_NOTES_BODY.md
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Update CHANGELOG.md
        run: |
          set -e
          [ -f CHANGELOG.md ] && mv CHANGELOG.md CHANGELOG_OLD.md || true
            cat RELEASE_NOTES_BODY.md CHANGELOG_OLD.md 2>/dev/null > CHANGELOG.md
          echo "CHANGELOG preview:"
          head -n 60 CHANGELOG.md || true

      - name: Commit CHANGELOG.md back to master
        run: |
          set -e
          DEFAULT_BRANCH="master"
          git fetch origin "$DEFAULT_BRANCH" --depth=1
          git checkout "$DEFAULT_BRANCH"
          cp -f "$GITHUB_WORKSPACE/CHANGELOG.md" CHANGELOG.md
          git add CHANGELOG.md
          if git diff --cached --quiet; then
            echo "No CHANGELOG changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "docs(changelog): update for $GITHUB_REF_NAME"
            git push origin "$DEFAULT_BRANCH"
          fi

      - name: Determine image tag variants
        id: taglogic
        run: |
          TAG="${GITHUB_REF_NAME}"
          if [[ "$TAG" != *"-"* ]]; then
            echo "latest_ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "latest_ok=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Docker login (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        run: |
          set -e
          TAG="${GITHUB_REF_NAME}"
          IMAGE="${IMAGE_BASE}-backend"
          docker build -f backend/Dockerfile backend -t "${IMAGE}:${TAG}"
          if [ "${{ steps.taglogic.outputs.latest_ok }}" = "true" ]; then
            docker tag "${IMAGE}:${TAG}" "${IMAGE}:latest"
          fi
          docker push "${IMAGE}:${TAG}"
          if [ "${{ steps.taglogic.outputs.latest_ok }}" = "true" ]; then
            docker push "${IMAGE}:latest"
          fi

      - name: Build & push frontend image
        run: |
          set -e
          TAG="${GITHUB_REF_NAME}"
          IMAGE="${IMAGE_BASE}-frontend"
          docker build -f frontend/Dockerfile frontend -t "${IMAGE}:${TAG}"
          if [ "${{ steps.taglogic.outputs.latest_ok }}" = "true" ]; then
            docker tag "${IMAGE}:${TAG}" "${IMAGE}:latest"
          fi
          docker push "${IMAGE}:${TAG}"
          if [ "${{ steps.taglogic.outputs.latest_ok }}" = "true" ]; then
            docker push "${IMAGE}:latest"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.body }}
          draft: false
          prerelease: false

      - name: Summary
        run: |
          echo "Release created for ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          head -n 120 RELEASE_NOTES_BODY.md >> $GITHUB_STEP_SUMMARY