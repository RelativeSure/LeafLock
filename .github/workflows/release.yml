# Automated Release Management Workflow
# Handles semantic versioning, changelog generation, and GitHub releases
name: üöÄ Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests (use with caution)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io

jobs:
  # Determine next version
  version-calculation:
    name: üìä Calculate Next Version
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.current.outputs.version }}
      next_version: ${{ steps.next.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch full history for changelog

      - name: Get current version
        id: current
        run: |
          # Get latest tag, default to v0.0.0 if no tags exist
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: ${CURRENT_VERSION}"

      - name: Calculate next version
        id: next
        run: |
          CURRENT="${{ steps.current.outputs.version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          
          # Use custom version if provided
          if [ -n "$CUSTOM_VERSION" ]; then
            # Ensure custom version starts with 'v'
            if [[ ! $CUSTOM_VERSION =~ ^v ]]; then
              NEXT_VERSION="v${CUSTOM_VERSION}"
            else
              NEXT_VERSION="$CUSTOM_VERSION"
            fi
          else
            # Remove 'v' prefix for calculation
            CURRENT_CLEAN=${CURRENT#v}
            
            # Split version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_CLEAN"
            
            # Default values if empty
            MAJOR=${MAJOR:-0}
            MINOR=${MINOR:-0}
            PATCH=${PATCH:-0}
            
            case "$VERSION_TYPE" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
              "prerelease")
                PATCH=$((PATCH + 1))
                PRERELEASE="-rc.$(date +%Y%m%d%H%M%S)"
                ;;
            esac
            
            if [ "$VERSION_TYPE" = "prerelease" ]; then
              NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}"
            else
              NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            fi
          fi
          
          echo "version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "Next version: ${NEXT_VERSION}"

      - name: Generate changelog
        id: changelog
        run: |
          CURRENT="${{ steps.current.outputs.version }}"
          NEXT="${{ steps.next.outputs.version }}"
          
          # Create changelog between versions
          if [ "$CURRENT" = "v0.0.0" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${CURRENT}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          # If no changes, create default changelog
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="* Maintenance release"
          fi
          
          # Save changelog to file for multi-line output
          cat > changelog.md << EOF
          ## What's Changed
          
          ${CHANGELOG}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${CURRENT}...${NEXT}
          EOF
          
          # Set output using heredoc for multi-line
          {
            echo "changelog<<CHANGELOG_EOF"
            cat changelog.md
            echo "CHANGELOG_EOF"
          } >> $GITHUB_OUTPUT

      - name: Validate version
        run: |
          NEXT="${{ steps.next.outputs.version }}"
          CURRENT="${{ steps.current.outputs.version }}"
          
          # Check if version already exists
          if git rev-parse "$NEXT" >/dev/null 2>&1; then
            echo "‚ùå Version $NEXT already exists!"
            exit 1
          fi
          
          echo "‚úÖ Version validation passed"
          echo "üìà Version bump: $CURRENT ‚Üí $NEXT"

  # Run tests before release (unless skipped)
  pre-release-tests:
    name: üß™ Pre-release Tests  
    runs-on: ubuntu-latest
    needs: version-calculation
    if: github.event.inputs.skip_tests != 'true'

    services:
      postgres:
        image: postgres:17-alpine@sha256:855021a5b10954343902a8c22a15f8464233126c1d12d9ad84d4a14c5af07a80
        env:
          POSTGRES_PASSWORD: testpass123
          POSTGRES_DB: notes
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine@sha256:987c376c727652f99625c7d205a1cba3cb2c53b92b0b62aade2bd48ee1593232
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "22"
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Run backend tests
        working-directory: backend
        run: |
          go test -v -race ./...

      - name: Run frontend tests
        working-directory: frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm run test

      - name: Quick integration test
        env:
          DATABASE_URL: postgres://postgres:testpass123@localhost:5432/notes?sslmode=disable
          REDIS_URL: localhost:6379
          JWT_SECRET: test_jwt_secret_for_ci_only_not_for_production_use_12345678901234567890
          SERVER_ENCRYPTION_KEY: test_encryption_key_32_chars_ok12
        working-directory: backend
        run: |
          go build -o app .
          ./app &
          BACKEND_PID=$!
          
          sleep 5
          curl -f http://localhost:8080/api/v1/health || exit 1
          kill $BACKEND_PID

  # Create the release
  create-release:
    name: üéâ Create Release
    runs-on: ubuntu-latest
    needs: [version-calculation, pre-release-tests]
    if: always() && (needs.pre-release-tests.result == 'success' || github.event.inputs.skip_tests == 'true')

    permissions:
      contents: write
      packages: write

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          VERSION="${{ needs.version-calculation.outputs.next_version }}"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version-calculation.outputs.next_version }}
          name: üöÄ Release ${{ needs.version-calculation.outputs.next_version }}
          body: |
            ${{ github.event.inputs.release_notes || needs.version-calculation.outputs.changelog }}
            
            ## üì¶ Container Images
            
            Pull the latest images:
            ```bash
            docker pull ghcr.io/${{ github.repository }}/backend:${{ needs.version-calculation.outputs.next_version }}
            docker pull ghcr.io/${{ github.repository }}/frontend:${{ needs.version-calculation.outputs.next_version }}
            ```
            
            ## üöÄ Quick Deploy
            
            ```bash
            # Deploy this specific version
            VERSION=${{ needs.version-calculation.outputs.next_version }} ./deploy-from-ghcr.sh deploy
            
            # Or update your docker-compose
            export VERSION=${{ needs.version-calculation.outputs.next_version }}
            docker-compose -f docker-compose.yml up -d
            ```
            
            ---
            
            ü§ñ *This release was created automatically by [GitHub Actions](https://github.com/${{ github.repository }}/actions)*
            
            ---
            
            ## üßë‚Äçüíª Community
            - üêõ Report bugs: https://github.com/${{ github.repository }}/issues/new?template=bug_report.md
            - üí° Request features: https://github.com/${{ github.repository }}/issues/new?template=feature_request.md
            - üìù Docs improvements: https://github.com/${{ github.repository }}/issues/new?template=docs_improvement.md
            - üí¨ Discussions (Q&A/ideas/design): https://github.com/${{ github.repository }}/discussions

            ---

            ## üöÑ Railway Deploy (Manual)
            - Run the manual Railway deploy workflow from Actions: https://github.com/${{ github.repository }}/actions/workflows/railway-deploy.yml
            - Choose target (backend|frontend|both) and environment. Requires repository secret `RAILWAY_TOKEN`.
          draft: false
          prerelease: ${{ contains(needs.version-calculation.outputs.next_version, '-rc.') }}

  # Container build info (automatic trigger via release event)
  container-build-info:
    name: üê≥ Container Build Info
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Container build notification
        run: |
          echo "üì¶ Container build workflow will be triggered automatically by the release event"
          echo "üîó Check build progress: https://github.com/${{ github.repository }}/actions/workflows/build-containers.yml"
          
          VERSION="${{ needs.version-calculation.outputs.next_version }}"
          echo "üì¶ Containers will be available at:"
          echo "   - ghcr.io/${{ github.repository }}/backend:${VERSION}"
          echo "   - ghcr.io/${{ github.repository }}/frontend:${VERSION}"
          
          echo ""
          echo "The build-containers.yml workflow is configured to trigger on 'release: published' events"
          echo "and will automatically build and push the container images for this release."

  # Post-release tasks
  post-release:
    name: üìã Post-release Tasks
    runs-on: ubuntu-latest
    needs: [version-calculation, create-release, container-build-info]
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Update version in files
        run: |
          VERSION="${{ needs.version-calculation.outputs.next_version }}"
          VERSION_CLEAN=${VERSION#v}
          
          # Update package.json files if they exist
          if [ -f "frontend/package.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION_CLEAN}\"/" frontend/package.json
            echo "Updated frontend/package.json version to ${VERSION_CLEAN}"
          fi
          
          # Update any other version files
          if [ -f "VERSION" ]; then
            echo "${VERSION_CLEAN}" > VERSION
            echo "Updated VERSION file to ${VERSION_CLEAN}"
          fi

      - name: Create version bump PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "üîñ Bump version to ${{ needs.version-calculation.outputs.next_version }}"
          title: "üîñ Version bump to ${{ needs.version-calculation.outputs.next_version }}"
          body: |
            Automated version bump after release ${{ needs.version-calculation.outputs.next_version }}
            
            This PR updates version numbers in configuration files to match the latest release.
            
            - Updated package.json version
            - Updated VERSION file (if exists)
            
            **This PR can be auto-merged safely.**
          labels: chore, automation
          branch: version-bump-${{ needs.version-calculation.outputs.next_version }}
          delete-branch: true

      - name: Create release summary
        run: |
          echo "## üéâ Release ${{ needs.version-calculation.outputs.next_version }} Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Release Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ needs.version-calculation.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ needs.version-calculation.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release ID**: ${{ needs.create-release.outputs.release_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [üìã View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.version-calculation.outputs.next_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [üì¶ View Packages](https://github.com/${{ github.repository }}/pkgs/container)" >> $GITHUB_STEP_SUMMARY
          echo "- [üîÑ Build Workflow](https://github.com/${{ github.repository }}/actions/workflows/build-containers.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [üöÑ Railway Deploy (Manual)](https://github.com/${{ github.repository }}/actions/workflows/railway-deploy.yml)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. ‚úÖ **Release created and tagged**" >> $GITHUB_STEP_SUMMARY
          echo "2. ‚è≥ **Container images building** (check build workflow)" >> $GITHUB_STEP_SUMMARY
          echo "3. üîÑ **Version bump PR created** (can be auto-merged)" >> $GITHUB_STEP_SUMMARY
          echo "4. üöÄ **Ready for deployment** once containers are built" >> $GITHUB_STEP_SUMMARY
