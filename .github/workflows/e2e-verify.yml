name: E2E Verify

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  e2e:
    name: E2E Tests with Playwright
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: testpass123
          POSTGRES_DB: notes
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname redis
        ports:
          - 6379:6379

    env:
      # Environment variables for services
      POSTGRES_PASSWORD: testpass123
      REDIS_PASSWORD: redispass123
      JWT_SECRET: test_jwt_secret_for_ci_only_not_for_production_use_12345678
      SERVER_ENCRYPTION_KEY: test_encryption_key_32_chars_ok_1234
      CORS_ORIGINS: http://localhost:3000
      VITE_API_URL: http://localhost:8080
      VITE_ENABLE_ADMIN_PANEL: "true"

      # Act CLI compatibility - use service names when running in act
      DATABASE_URL: >-
        ${{ github.actor == 'act' &&
        'postgres://postgres:testpass123@postgres:5432/notes?sslmode=disable' ||
        'postgres://postgres:testpass123@localhost:5432/notes?sslmode=disable' }}
      REDIS_URL: ${{ github.actor == 'act' && 'redis:6379' || 'localhost:6379' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache-dependency-path: backend/go.sum

      - name: Wait for Services
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done

          echo "Waiting for Redis..."
          for i in {1..30}; do
            if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
              echo "Redis is ready!"
              break
            fi
            echo "Redis is unavailable - sleeping"
            sleep 2
          done

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Install backend dependencies
        working-directory: backend
        run: go mod download

      - name: Build frontend
        working-directory: frontend
        run: pnpm run build

      - name: Start backend
        working-directory: backend
        run: |
          go build -o app .
          ./app &
          echo $! > backend.pid
        env:
          PORT: 8080

      - name: Start frontend
        working-directory: frontend
        run: |
          pnpm run preview --port 3000 --host 0.0.0.0 &
          echo $! > frontend.pid

      - name: Wait for application ready
        run: |
          echo "Waiting for backend..."
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/api/v1/health >/dev/null 2>&1; then
              echo "Backend ready"
              break
            fi
            echo "Backend not ready, waiting..."
            sleep 2
          done

          echo "Waiting for frontend..."
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" \
              http://localhost:3000/ 2>/dev/null || echo "000")
            if [ "$code" = "200" ]; then
              echo "Frontend ready"
              break
            fi
            echo "Frontend not ready (code: $code), waiting..."
            sleep 2
          done

      - name: Install Playwright browsers
        working-directory: frontend
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests
        working-directory: frontend
        run: pnpm exec playwright test
        env:
          BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Backend unit tests
        working-directory: backend
        run: go test -v ./...

      - name: Cleanup processes
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi
          if [ -f frontend/frontend.pid ]; then
            kill $(cat frontend/frontend.pid) || true
          fi
          # Kill any remaining processes
          pkill -f "./app" || true
          pkill -f "vite preview" || true
