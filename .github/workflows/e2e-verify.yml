name: E2E Verify

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  e2e:
    name: E2E Tests with Playwright
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:18-alpine@sha256:70b32afe0c274b4d93098fd724fcdaab3aba47270a4f1e63cbf9cc69d7bf1be4
        env:
          POSTGRES_PASSWORD: testpass123
          POSTGRES_DB: leaflock
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname postgres
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --hostname redis
        ports:
          - 6379:6379

    env:
      # Environment variables for services
      POSTGRES_PASSWORD: testpass123
      REDIS_PASSWORD: redispass123
      JWT_SECRET: test_jwt_secret_for_ci_only_not_for_production_use_12345678
      SERVER_ENCRYPTION_KEY: test_encryption_key_32_chars_ok_1234
      CORS_ORIGINS: http://localhost:3000
      VITE_API_URL: http://localhost:8080
      VITE_ENABLE_ADMIN_PANEL: "true"

      # Act CLI compatibility - use service names when running in act
      DATABASE_URL: >-
        ${{ github.actor == 'act' &&
        'postgres://postgres:testpass123@postgres:5432/leaflock?sslmode=disable' ||
        'postgres://postgres:testpass123@localhost:5432/leaflock?sslmode=disable' }}
      REDIS_URL: ${{ github.actor == 'act' && 'redis:6379' || 'localhost:6379' }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: '1.25'
          cache-dependency-path: backend/go.sum

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Services
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done

          echo "Waiting for Redis..."
          for i in {1..30}; do
            if timeout 2 bash -c "</dev/tcp/localhost/6379"; then
              echo "Redis is ready!"
              break
            fi
            echo "Redis is unavailable - sleeping"
            sleep 2
          done

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Install backend dependencies
        working-directory: backend
        run: go mod download

      - name: Build frontend
        working-directory: frontend
        run: pnpm run build

      - name: Start backend
        working-directory: backend
        run: |
          go build -o app .
          ./app &
          echo $! > backend.pid
        env:
          PORT: 8080

      - name: Start frontend
        working-directory: frontend
        run: |
          pnpm run preview --port 3000 --host 0.0.0.0 &
          echo $! > frontend.pid

      - name: Test database connectivity
        run: |
          echo "Testing database connectivity..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres -d leaflock; then
              echo "‚úÖ Database is ready and accepting connections"
              break
            fi
            echo "‚è≥ Database not ready, attempt $i/30..."
            sleep 2
          done

          echo "Testing database access..."
          PGPASSWORD=testpass123 psql -h localhost -p 5432 -U postgres -d leaflock -c "SELECT 1;" || {
            echo "‚ùå Failed to connect to database"
            exit 1
          }

      - name: Wait for application ready
        run: |
          echo "Waiting for backend..."
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/api/v1/health >/dev/null 2>&1; then
              echo "‚úÖ Backend ready"
              break
            fi
            echo "‚è≥ Backend not ready, attempt $i/60..."
            sleep 2
          done

          echo "Testing backend API endpoints..."
          curl -v http://localhost:8080/api/v1/health || {
            echo "‚ùå Backend health check failed"
            exit 1
          }

          echo "Waiting for frontend..."
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" \
              http://localhost:3000/ 2>/dev/null || echo "000")
            if [ "$code" = "200" ]; then
              echo "‚úÖ Frontend ready"
              break
            fi
            echo "‚è≥ Frontend not ready (code: $code), attempt $i/60..."
            sleep 2
          done

      - name: Test IPv6 Support
        run: |
          echo "Testing IPv6 dual-stack support..."

          # Test backend IPv4
          echo "Testing backend on IPv4 (127.0.0.1)..."
          if curl -fsS http://127.0.0.1:8080/api/v1/health/live 2>&1 | grep -q "live"; then
            echo "‚úÖ Backend IPv4 works"
          else
            echo "‚ùå Backend IPv4 failed"
            exit 1
          fi

          # Test backend IPv6 (optional - may not be available in CI)
          echo "Testing backend on IPv6 ([::1])..."
          if curl -fsS "http://[::1]:8080/api/v1/health/live" 2>/dev/null | grep -q "live"; then
            echo "‚úÖ Backend IPv6 works"
          else
            echo "‚ö†Ô∏è  Backend IPv6 not available in CI (expected on IPv4-only systems)"
          fi

          echo "üîç Final connectivity check..."
          echo "Backend health: $(curl -s http://localhost:8080/api/v1/health || echo 'FAILED')"
          echo "Frontend status: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/ || echo 'FAILED')"

      - name: Install Playwright browsers
        working-directory: frontend
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests
        working-directory: frontend
        run: pnpm exec playwright test --reporter=list --timeout=30000
        env:
          BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Backend unit tests
        working-directory: backend
        run: go test -v ./...

      - name: Cleanup processes
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi
          if [ -f frontend/frontend.pid ]; then
            kill $(cat frontend/frontend.pid) || true
          fi
          # Kill any remaining processes
          pkill -f "./app" || true
          pkill -f "vite preview" || true
