# .github/workflows/ci.yml - Complete CI/CD workflow for testing and verification
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Test Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        go mod download
        go mod verify
    
    - name: Run Go fmt
      working-directory: ./backend
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted"
          gofmt -d .
          exit 1
        fi
    
    - name: Run Go vet
      working-directory: ./backend
      run: go vet ./...
    
    - name: Run Go tests
      working-directory: ./backend
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.txt
        flags: backend
        name: backend-coverage

  # Job 2: Test Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint || true
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --passWithNoTests
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_API_URL: http://localhost:8080
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Job 3: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Generate .env file
      run: |
        cat > .env << EOF
        POSTGRES_PASSWORD=testpass123
        REDIS_PASSWORD=testredis123
        JWT_SECRET=testsecret123456789012345678901234567890123456789012345678901234
        SERVER_ENCRYPTION_KEY=testkey12345678901234567890123456
        CORS_ORIGINS=http://localhost:3000
        VITE_API_URL=http://localhost:8080
        EOF
    
    - name: Create necessary files
      run: |
        # Run setup script to create all necessary files
        chmod +x setup-docker.sh
        ./setup-docker.sh || true
        
        # Ensure backend has go.mod if missing
        if [ ! -f backend/go.mod ]; then
          cd backend
          go mod init secure-notes
          go mod tidy
          cd ..
        fi
    
    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: secure-notes-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/backend.tar
    
    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: secure-notes-frontend:test
        build-args: |
          VITE_API_URL=http://localhost:8080
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/frontend.tar
    
    - name: Upload Docker images
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          /tmp/backend.tar
          /tmp/frontend.tar
        retention-days: 1

  # Job 4: Integration Test with Docker Compose
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker images
      uses: actions/download-artifact@v3
      with:
        name: docker-images
        path: /tmp
    
    - name: Load Docker images
      run: |
        docker load -i /tmp/backend.tar
        docker load -i /tmp/frontend.tar
        docker tag secure-notes-backend:test secure-notes-backend:latest
        docker tag secure-notes-frontend:test secure-notes-frontend:latest
    
    - name: Generate test environment
      run: |
        cat > .env << EOF
        POSTGRES_PASSWORD=testpass123
        REDIS_PASSWORD=testredis123
        JWT_SECRET=testsecret123456789012345678901234567890123456789012345678901234
        SERVER_ENCRYPTION_KEY=testkey12345678901234567890123456
        CORS_ORIGINS=http://localhost:3000
        VITE_API_URL=http://localhost:8080
        EOF
        
        # Create init-ssl.sh script
        cat > init-ssl.sh << 'SCRIPT'
        #!/bin/bash
        echo "Generating SSL certificates..."
        cd /var/lib/postgresql
        openssl req -new -x509 -days 365 -nodes -text \
          -out server.crt -keyout server.key \
          -subj "/CN=postgres"
        chmod 600 server.key
        chown postgres:postgres server.key server.crt
        SCRIPT
        chmod +x init-ssl.sh
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
    
    - name: Check service health
      run: |
        # Check if containers are running
        docker-compose ps
        
        # Check PostgreSQL
        docker-compose exec -T postgres pg_isready -U postgres || exit 1
        echo "✅ PostgreSQL is ready"
        
        # Check Redis
        docker-compose exec -T redis redis-cli ping || exit 1
        echo "✅ Redis is ready"
        
        # Check Backend health endpoint
        curl -f http://localhost:8080/api/v1/health || exit 1
        echo "✅ Backend is healthy"
        
        # Check Frontend
        curl -f http://localhost:3000 || exit 1
        echo "✅ Frontend is accessible"
    
    - name: Run API tests
      run: |
        # Test registration endpoint
        curl -X POST http://localhost:8080/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"TestPassword123!"}' \
          -f -s -o /dev/null -w "Registration: %{http_code}\n"
        
        # Test login endpoint
        RESPONSE=$(curl -X POST http://localhost:8080/api/v1/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"TestPassword123!"}' \
          -f -s)
        
        echo "Login response received"
        
        # Extract token (basic check)
        if echo "$RESPONSE" | grep -q "token"; then
          echo "✅ Authentication working"
        else
          echo "❌ Authentication failed"
          exit 1
        fi
    
    - name: Check for security headers
      run: |
        # Check if security headers are present
        HEADERS=$(curl -I http://localhost:3000 2>/dev/null)
        
        echo "Checking security headers..."
        
        # Check for important security headers
        if echo "$HEADERS" | grep -qi "X-Frame-Options"; then
          echo "✅ X-Frame-Options present"
        else
          echo "⚠️  X-Frame-Options missing"
        fi
        
        if echo "$HEADERS" | grep -qi "X-Content-Type-Options"; then
          echo "✅ X-Content-Type-Options present"
        else
          echo "⚠️  X-Content-Type-Options missing"
        fi
    
    - name: Test data persistence
      run: |
        # Create a test note (would need auth token in real scenario)
        echo "Testing data persistence..."
        
        # Check if PostgreSQL has the correct schema
        docker-compose exec -T postgres psql -U postgres -d notes -c "\dt" | grep users && echo "✅ Database schema created"
    
    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Status ==="
        docker-compose ps
        
        echo "=== Backend Logs ==="
        docker-compose logs backend
        
        echo "=== Frontend Logs ==="
        docker-compose logs frontend
        
        echo "=== PostgreSQL Logs ==="
        docker-compose logs postgres
        
        echo "=== Redis Logs ==="
        docker-compose logs redis
    
    - name: Stop services
      if: always()
      run: docker-compose down -v

  # Job 5: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy security scan on backend
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'backend-security.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Trivy security scan on frontend
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './frontend'
        format: 'sarif'
        output: 'frontend-security.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'backend-security.sarif'
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # Job 6: Performance Test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: integration-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker images
      uses: actions/download-artifact@v3
      with:
        name: docker-images
        path: /tmp
    
    - name: Load and start services
      run: |
        docker load -i /tmp/backend.tar
        docker load -i /tmp/frontend.tar
        docker tag secure-notes-backend:test secure-notes-backend:latest
        docker tag secure-notes-frontend:test secure-notes-frontend:latest
        
        # Generate .env
        cat > .env << EOF
        POSTGRES_PASSWORD=testpass123
        REDIS_PASSWORD=testredis123
        JWT_SECRET=testsecret123456789012345678901234567890123456789012345678901234
        SERVER_ENCRYPTION_KEY=testkey12345678901234567890123456
        EOF
        
        # Create init-ssl.sh
        echo '#!/bin/bash' > init-ssl.sh
        chmod +x init-ssl.sh
        
        docker-compose up -d
        sleep 30
    
    - name: Run load test with Apache Bench
      run: |
        sudo apt-get update && sudo apt-get install -y apache2-utils
        
        # Test frontend loading
        ab -n 100 -c 10 -t 10 http://localhost:3000/ || true
        
        # Test API health endpoint
        ab -n 100 -c 10 -t 10 http://localhost:8080/api/v1/health || true
        
        echo "✅ Basic performance test completed"
    
    - name: Check resource usage
      run: |
        docker stats --no-stream
        docker-compose logs --tail=50
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Job 7: Report Status
  report-status:
    name: Report Status
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test, security-scan, performance-test]
    if: always()
    
    steps:
    - name: Report success
      if: success()
      run: |
        echo "✅ All tests passed!"
        echo "- Backend tests: ✅"
        echo "- Frontend tests: ✅"
        echo "- Docker build: ✅"
        echo "- Integration tests: ✅"
        echo "- Security scan: ✅"
        echo "- Performance test: ✅"
        echo ""
        echo "The application is ready for deployment!"
    
    - name: Report failure
      if: failure()
      run: |
        echo "❌ Some tests failed. Check the logs above for details."
        exit 1

---
# .github/workflows/deploy.yml - Deployment workflow (separate file)
name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/secure-notes-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/secure-notes-backend:${{ github.sha }}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/secure-notes-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/secure-notes-frontend:${{ github.sha }}
    
    - name: Deploy notification
      run: |
        echo "Deployment complete!"
        echo "Images pushed to Docker Hub"
        echo "Backend: ${{ secrets.DOCKER_USERNAME }}/secure-notes-backend:${{ github.sha }}"
        echo "Frontend: ${{ secrets.DOCKER_USERNAME }}/secure-notes-frontend:${{ github.sha }}"